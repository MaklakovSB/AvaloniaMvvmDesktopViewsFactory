1. GetViewType_ByConvention_ReturnsCorrectType

Что проверяет:
Данный тест убеждается, что фабрика представлений (ViewsFactory) корректно находит и возвращает нужный тип View по ViewModel согласно соглашениям об именовании.

Как работает:
Создаёт экземпляр MainWindowViewModel.
Рефлексией вызывает приватный метод GetViewType<TViewModel>.
Проверяет, что возвращённый тип — это именно MainWindowView (а не что-то другое и не null).


2. GetViewType_Throws_ForUnknownViewModel

Что проверяет:
Данный тест проверяет, что фабрика выбрасывает корректное исключение, если для переданной ViewModel не найдено представления (View).

Как работает:
Создаёт фиктивную viewmodel (DummyVm), для которой заведомо нет View.
Рефлексией вызывает метод GetViewType<DummyVm>.
Проверяет, что выброшено исключение TargetInvocationException, а его внутреннее исключение — InvalidOperationException с ожидаемым текстом ("Could not find View for...").
Если исключение не выброшено, либо выброшено не то, тест упадёт.


3. EnsureViewModelHasUid_AssignsUid

Что проверяет:
Данный тест гарантирует, что у ViewModel, переданной в фабрику, будет сгенерирован и установлен уникальный идентификатор (Guid), если он ещё не был установлен.

Как работает: 
Создаёт экземпляр MainWindowViewModel.
Рефлексией вызывает приватный метод EnsureViewModelHasUid<TViewModel>.
Проверяет, что поле Uid не равно Guid.Empty (то есть действительно был назначен уникальный идентификатор).


4. Dispose_DoesNotThrow

Что проверяет: 
Данный тест проверяет, что вызов метода Dispose() у фабрики не приводит к исключениям, даже если его вызвать несколько раз подряд. Это стандартная практика для объектов, реализующих IDisposable.

Как работает: 
Вызывает Dispose() дважды и убеждается, что ни разу не выброшено исключение